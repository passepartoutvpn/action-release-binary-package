name: Release binary package
inputs:
  framework:
    description: "The XCFramework output"
    required: true
  script:
    description: "The script generating the XCFramework"
    required: true
  gpg-key:
    description: "The GPG key to commit the update"
    required: true
  gpg-passphrase:
    description: "The passphrase of the GPG key"
  version-file:
    description: "The version file (contains <lib_version>-<script_version>)"
    default: ".version"
runs:
  using: composite
  steps:
    - name: Build framework
      id: build
      shell: bash
      env:
        GEN_SCRIPT: ${{ inputs.script }}
        GEN_FRAMEWORK: ${{ inputs.framework }}
        GEN_VERSION_FILE: ${{ inputs.version-file }}
      run: |
        COMPOUND_VERSION=`cat $GEN_VERSION_FILE`

        LIBRARY_VERSION=${COMPOUND_VERSION%-*}
        LIBRARY_MINOR=${LIBRARY_VERSION%.*}
        LIBRARY_PATCH=${LIBRARY_VERSION##*.}

        SCRIPT_VERSION=${COMPOUND_VERSION#*-}

        if [[ "$SCRIPT_VERSION" != "$COMPOUND_VERSION" ]]; then
          MERGED_PATCH=$((($LIBRARY_PATCH + 1) * 100 + $SCRIPT_VERSION))
          TAG_NAME="$LIBRARY_MINOR.$MERGED_PATCH"
        else
          TAG_NAME="$COMPOUND_VERSION"
        fi

        ./${GEN_SCRIPT} ${LIBRARY_VERSION} ${GEN_FRAMEWORK}

        echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "library_version=$LIBRARY_VERSION" >> $GITHUB_OUTPUT
        echo "script_version=$SCRIPT_VERSION" >> $GITHUB_OUTPUT
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ inputs.gpg-key }}
        passphrase: ${{ inputs.gpg-passphrase }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true
        git_push_gpgsign: false
    - name: Update package
      id: package
      shell: bash
      env:
        TAG_NAME: ${{ steps.build.outputs.tag }}
        LIBRARY_VERSION: ${{ steps.build.outputs.library_version }}
        SCRIPT_VERSION: ${{ steps.build.outputs.script_version }}
        FRAMEWORK: ${{ inputs.framework }}
        PACKAGE_ZIP: ${{ inputs.framework }}.zip
        PACKAGE_CHECKSUM: ${{ inputs.framework }}.zip.checksum
        PACKAGE_METADATA: "Package.swift"
      run: |
        zip -yr "$PACKAGE_ZIP" "$FRAMEWORK"

        CHECKSUM=`swift package compute-checksum "$PACKAGE_ZIP"`
        echo $CHECKSUM >$PACKAGE_CHECKSUM

        sed -E "s@/[0-9\.]*/(${PACKAGE_ZIP})@/${TAG_NAME}/\\1@" $PACKAGE_METADATA |
            sed -E "s/checksum: \"[0-9a-f]*\"/checksum: \"${CHECKSUM}\"/" >$PACKAGE_METADATA.tmp
        mv $PACKAGE_METADATA.tmp $PACKAGE_METADATA

        RELEASE_NAME="$LIBRARY_VERSION"
        if [ "$SCRIPT_VERSION" -gt 0 ]; then
          RELEASE_NAME="$RELEASE_NAME ($SCRIPT_VERSION)"
        fi

        git add $PACKAGE_METADATA
        git commit -m "$RELEASE_NAME"
        git tag "$TAG_NAME" -m "$RELEASE_NAME"
        git push && git push --tags

        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "zip=$PACKAGE_ZIP" >> $GITHUB_OUTPUT
        echo "checksum=$PACKAGE_CHECKSUM" >> $GITHUB_OUTPUT
    - name: Publish release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ steps.package.outputs.release_name }}
        tag_name: ${{ steps.build.outputs.tag }}
        generate_release_notes: true
        files: |
          ${{ steps.package.outputs.zip }}
          ${{ steps.package.outputs.checksum }}
